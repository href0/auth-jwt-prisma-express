// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String
  password       String    @db.VarChar(255)
  gender         Gender?
  birthDate      DateTime? @db.Date()
  phone          String?   @db.VarChar(15)
  avatar         String?   @db.VarChar(255)
  roleId         Int
  role           Role      @relation(fields: [roleId], references: [id])
  createdAt      Int
  updatedAt      Int?
  createProducts Product[] @relation("created")
  updateProducts Product[] @relation("updated")

  @@map("users")
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique()
  users           User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Menu {
  id       Int       @id @default(autoincrement())
  name     String    @unique()
  icon     String
  url      String?
  subMenus SubMenu[]

  @@map("menus")
}

model SubMenu {
  id     Int     @id @default(autoincrement())
  name   String  @unique()
  menuId Int
  menu   Menu    @relation(fields: [menuId], references: [id])
  icon   String
  url    String?

  @@map("sub_menus")
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           // route name
  method          Method           @default(GET)
  rolePermissions RolePermission[]
}

model RolePermission {
  id              Int        @id @default(autoincrement())
  roleId          Int
  role            Role       @relation(fields: [roleId], references: [id])
  permissionId    Int
  permission      Permission @relation(fields: [permissionId], references: [id])
  active          Int        @default(0) @db.TinyInt()
  canUpdateOthers Int        @default(0) @db.TinyInt() // default false
  createdAt       Int
  updatedAt       Int

  @@map("role_permissions")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @unique()
  price       Float   @db.Double()
  description String?
  createdAt   Int
  updatedAt   Int
  createdBy   Int
  updatedBy   Int
  created     User    @relation(fields: [createdBy], references: [id], name: "created")
  updated     User    @relation(fields: [updatedBy], references: [id], name: "updated")

  @@map("products")
}

enum Method {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum Gender {
  Male
  Female
}
